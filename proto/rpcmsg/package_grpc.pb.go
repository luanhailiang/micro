// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: rpcmsg/package.proto

package rpcmsg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommandClient is the client API for Command service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommandClient interface {
	Call(ctx context.Context, in *CallMessage, opts ...grpc.CallOption) (*BackMessage, error)
}

type commandClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandClient(cc grpc.ClientConnInterface) CommandClient {
	return &commandClient{cc}
}

func (c *commandClient) Call(ctx context.Context, in *CallMessage, opts ...grpc.CallOption) (*BackMessage, error) {
	out := new(BackMessage)
	err := c.cc.Invoke(ctx, "/rpcmsg.Command/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommandServer is the server API for Command service.
// All implementations must embed UnimplementedCommandServer
// for forward compatibility
type CommandServer interface {
	Call(context.Context, *CallMessage) (*BackMessage, error)
	mustEmbedUnimplementedCommandServer()
}

// UnimplementedCommandServer must be embedded to have forward compatible implementations.
type UnimplementedCommandServer struct {
}

func (UnimplementedCommandServer) Call(context.Context, *CallMessage) (*BackMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedCommandServer) mustEmbedUnimplementedCommandServer() {}

// UnsafeCommandServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandServer will
// result in compilation errors.
type UnsafeCommandServer interface {
	mustEmbedUnimplementedCommandServer()
}

func RegisterCommandServer(s grpc.ServiceRegistrar, srv CommandServer) {
	s.RegisterService(&Command_ServiceDesc, srv)
}

func _Command_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcmsg.Command/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServer).Call(ctx, req.(*CallMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Command_ServiceDesc is the grpc.ServiceDesc for Command service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Command_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpcmsg.Command",
	HandlerType: (*CommandServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _Command_Call_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcmsg/package.proto",
}

// ConnectClient is the client API for Connect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectClient interface {
	Exec(ctx context.Context, in *BuffMessage, opts ...grpc.CallOption) (*BackMessage, error)
	Link(ctx context.Context, opts ...grpc.CallOption) (Connect_LinkClient, error)
}

type connectClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectClient(cc grpc.ClientConnInterface) ConnectClient {
	return &connectClient{cc}
}

func (c *connectClient) Exec(ctx context.Context, in *BuffMessage, opts ...grpc.CallOption) (*BackMessage, error) {
	out := new(BackMessage)
	err := c.cc.Invoke(ctx, "/rpcmsg.Connect/Exec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectClient) Link(ctx context.Context, opts ...grpc.CallOption) (Connect_LinkClient, error) {
	stream, err := c.cc.NewStream(ctx, &Connect_ServiceDesc.Streams[0], "/rpcmsg.Connect/Link", opts...)
	if err != nil {
		return nil, err
	}
	x := &connectLinkClient{stream}
	return x, nil
}

type Connect_LinkClient interface {
	Send(*BuffMessage) error
	Recv() (*BackMessage, error)
	grpc.ClientStream
}

type connectLinkClient struct {
	grpc.ClientStream
}

func (x *connectLinkClient) Send(m *BuffMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *connectLinkClient) Recv() (*BackMessage, error) {
	m := new(BackMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConnectServer is the server API for Connect service.
// All implementations must embed UnimplementedConnectServer
// for forward compatibility
type ConnectServer interface {
	Exec(context.Context, *BuffMessage) (*BackMessage, error)
	Link(Connect_LinkServer) error
	mustEmbedUnimplementedConnectServer()
}

// UnimplementedConnectServer must be embedded to have forward compatible implementations.
type UnimplementedConnectServer struct {
}

func (UnimplementedConnectServer) Exec(context.Context, *BuffMessage) (*BackMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (UnimplementedConnectServer) Link(Connect_LinkServer) error {
	return status.Errorf(codes.Unimplemented, "method Link not implemented")
}
func (UnimplementedConnectServer) mustEmbedUnimplementedConnectServer() {}

// UnsafeConnectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectServer will
// result in compilation errors.
type UnsafeConnectServer interface {
	mustEmbedUnimplementedConnectServer()
}

func RegisterConnectServer(s grpc.ServiceRegistrar, srv ConnectServer) {
	s.RegisterService(&Connect_ServiceDesc, srv)
}

func _Connect_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuffMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcmsg.Connect/Exec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectServer).Exec(ctx, req.(*BuffMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connect_Link_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConnectServer).Link(&connectLinkServer{stream})
}

type Connect_LinkServer interface {
	Send(*BackMessage) error
	Recv() (*BuffMessage, error)
	grpc.ServerStream
}

type connectLinkServer struct {
	grpc.ServerStream
}

func (x *connectLinkServer) Send(m *BackMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *connectLinkServer) Recv() (*BuffMessage, error) {
	m := new(BuffMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Connect_ServiceDesc is the grpc.ServiceDesc for Connect service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Connect_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpcmsg.Connect",
	HandlerType: (*ConnectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _Connect_Exec_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Link",
			Handler:       _Connect_Link_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpcmsg/package.proto",
}
